void Run()
{
	while (1)   //循环扫描系统磁盘
	{
		TCHAR tcBuffer[4] = {0}; //准备较小内存,先试探出实际需要的内存大小。
		DWORD dwNeededSize = GetLogicalDriveStrings(4, tcBuffer); //第一次执行，获得实际需要内存。
		if (dwNeededSize > 4)
		{   //返回值大于指定内存大小,需要重新准备足够内存再次执行。
			TCHAR *pBuffer = new TCHAR[dwNeededSize];  //准备足够大的内存
			dwNeededSize = GetLogicalDriveStrings(dwNeededSize, pBuffer); //获得逻辑驱动器字符串
			TCHAR *pDrive = pBuffer;
			int iPreLength = 0;
			while (1)
			{
				pDrive = pBuffer+iPreLength;  //获得下一个驱动器
				if (pDrive[0] == 0) //获取驱动器结束
				{
					break; //退出循环
				}
				DWORD dwDriveType = GetDriveType(pDrive); //获取驱动器类型
				if (dwDriveType == DRIVE_REMOVABLE)
				{   //如果是移动驱动器
					TCHAR tcFile[MAX_PATH] = {0};
					_stprintf(tcFile, _T("%sa.txt"), pDrive);
					//打开已存在的a.txt文件
					HANDLE hFile = CreateFile(tcFile, GENERIC_WRITE|GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,
						OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
					if (hFile == INVALID_HANDLE_VALUE)
					{
						//打开失败则创建一个。
						hFile = CreateFile(tcFile, GENERIC_WRITE|GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,
							CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
						DWORD dwWrite = 0;
						WriteFile(hFile, _T("Hello"), 5, &dwWrite, NULL);
					}
					CloseHandle(hFile);
				}
				iPreLength += _tcslen(pDrive);  //跳过当前驱动器
				iPreLength += sizeof(TCHAR);    //跳过'\0'。
			}
			if (pBuffer != NULL)
			{
				delete []pBuffer;  //释放内存
				pBuffer = NULL;
			}
		}
		Sleep(500);  //暂停500毫秒后继续扫描
		//如何g_hEvent无信号则暂停执行
		WaitForSingleObject(g_hEvent, INFINITE);
	}
}